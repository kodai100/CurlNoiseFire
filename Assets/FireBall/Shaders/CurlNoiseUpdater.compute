#pragma kernel Update

#define SIMULATION_BLOCK_SIZE 32

#include "./SimplexNoise3D.cginc"

struct Particle {
	float3 birthPos;
	float3 pos;
	float time;
	float life;
};

float _DT;
float3 _EmitPos;
float _Speed;
float _Time;

StructuredBuffer<Particle> bufferRead;
RWStructuredBuffer<Particle> bufferWrite;

float3 curlNoise(float3 p) {
	const float e = 0.0009765625;
	const float e2 = 2.0 * e;

	float3 dx = float3(e, 0.0, 0.0);
	float3 dy = float3(0.0, e, 0.0);
	float3 dz = float3(0.0, 0.0, e);

	float3 p_x0 = snoise3D(p - dx);
	float3 p_x1 = snoise3D(p + dx);
	float3 p_y0 = snoise3D(p - dy);
	float3 p_y1 = snoise3D(p + dy);
	float3 p_z0 = snoise3D(p - dz);
	float3 p_z1 = snoise3D(p + dz);

	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

	return normalize(float3(x, y, z) / e2);
}

float GetRandomNumber(float2 texCoord, int Seed) {
	return frac(sin(dot(texCoord.xy, float2(12.9898, 78.233)) + Seed) * 43758.5453);
}

[numthreads(SIMULATION_BLOCK_SIZE,1,1)]
void Update (uint3 DTid : SV_DispatchThreadID) {

	uint id = DTid.x;
	Particle p = bufferRead[id];

	if (p.time > p.life) {
		bufferWrite[id].pos = _EmitPos + 2 * p.birthPos;
		bufferWrite[id].time = 0;
	} else {
		bufferWrite[id].time = p.time + _DT;

		float3 vel = 10 * curlNoise(p.pos/10);

		vel += float3(0, 20 , 0);

		bufferWrite[id].pos = p.pos + _Speed * _DT * vel;
	}
}